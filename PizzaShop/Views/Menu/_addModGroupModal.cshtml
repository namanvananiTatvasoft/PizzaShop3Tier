@model DAL.ViewModel.MenuViewModel

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
<style>
    .mod-name-text
    {
        font-size: 14px;
        border: 1px solid black;
        border-radius: 15px;
        padding: 5px 10px;
        margin: 5px;
    }

    #save-btn-modal{
        background-color: #0066A7;
        border: 1px solid #0066A7;
        color: white;
    }

    .save-btn-modal
    {
        background-color: #0066A7;
        border: 1px solid #0066A7;
        color: white;
    }

    #cancel-btn-modal{
        background-color: white;
        color: #0066A7;
        border: 1px solid #0066A7;
    }

    
    #search-modifiers-input{
        outline: none;
        border: none;
    }


</style>

<form class="modal-body tab-pane fade show active" id="modifierGroupAddForm">
    <div class="d-flex justify-content-between mb-3">
        <h1 class="modal-title fs-4 fw-semibold" id="exampleModalLabel">Add Modifier Group</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
    </div>
    <div class="d-none" id="showWhatFor">add</div>


    <div class="form-group mb-3">
        <input type="text" class="form-control py-2" id="modgroupName" placeholder="Name*" asp-for="modifierGroupAdd.Modgroupname" name="Modgroupname">
        <div id="categoryNameError" class="text-danger"></div>
    </div>

    <div class="form-group mb-3">
        <textarea class="form-control py-2" id="modgroupDescription" rows="2" placeholder="Description" asp-for="modifierGroupAdd.Description" name="Description"></textarea>
    </div>

    <div class="special-color mb-3">
        <span id="addExistingModifiersBtn">+ add existing modifiers</span>
    </div>

    <div id="selectedModifiers" style="padding: 5px; width: 100%; display: flex; flex-wrap: wrap;">
        @* @for (int i = 0; i < Model.modifierGroupAdd.Modifierslist.Count; i++)
        {
            <span class="mod-name-text">
                @Model.modifierGroupAdd.Modifierslist[i] 
                <i class="bi bi-x-lg dark-icon"></i>
            </span>
        } *@
        <span class="mod-name-text">
            Name
            <i class="bi bi-x-lg dark-icon"></i>
        </span>
    </div>

    <div class="d-flex justify-content-end">
        <button type="submit" class="save-cancel-btn fw-semibold save-btn-modal" id="addModGroupSaveBtn">Save</button>
        <button type="button" class="save-cancel-btn fw-semibold" id="cancel-btn" data-bs-dismiss="modal">Cancel</button>
    </div>
</form>

<!-- Select Existing Modifiers Tab -->
<div class="fs-5 ms-3 mt-3 d-none" id="selectExistingModifersTab">

    <div class="fw-bold opacity-75 mb-3">Select Existing Modifier</div>

    <div id="selectModifierTable">
        <partial name="~/Views/Menu/_selectExistingModifiers.cshtml"/>
    </div>

    
    <div class="d-flex justify-content-start ps-0 mb-3 mt-3">
        <button type="button" class="save-cancel-btn fw-semibold ms-0" id="save-btn-modal">Add</button>
        <button type="button" class="save-cancel-btn fw-semibold" id="cancel-btn-modal" data-bs-dismiss="modal">Cancel</button>
    </div>
</div>





<script>


    addExistingModifiersBtn = document.querySelector('#addExistingModifiersBtn');
    backBtn = document.querySelector('#save-btn-modal');

    modifierAddForm = document.querySelector('#modifierGroupAddForm');
    selectExistingModifiersTab = document.querySelector('#selectExistingModifersTab');

    
    addExistingModifiersBtn.addEventListener('click', function() {
        modifierAddForm.classList.add('d-none');
        selectExistingModifiersTab.classList.remove('d-none');
    });

    backBtn.addEventListener('click', function() {
        modifierAddForm.classList.remove('d-none');
        selectExistingModifiersTab.classList.add('d-none');
    });

    cancelBtns = document.querySelectorAll('#cancel-btn-modal');
    cancelBtns.forEach(button => {
        button.addEventListener('click', function() {
            modifierAddForm.classList.remove('d-none');
            selectExistingModifiersTab.classList.add('d-none');
        });
    });


$("#modifierGroupAddForm").submit(function (e) {
    e.preventDefault();  // Prevent the default form submission

    console.log("this form is added");

    // Create FormData from the form
    let formData = new FormData(this);  // 'this' is the form element

    AddModGroup(formData);

    // Convert modifierIds Set to Array and append them to formData

});





    

</script>
